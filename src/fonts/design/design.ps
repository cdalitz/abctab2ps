%!PS-Adobe-3.0
%
% Font for tablature in abc2ps
% Copyright (c) 1999 Christoph Dalitz
%

% Help functions for drawing letters with a pen
%-----------------------------------------------
% lower end of pen, must be set before call to penfunctions
/penend 2 array def

% parameters in the following functions refer to upper end of pen

/penlineto { % usage like lineto
	currentpoint 4 2 roll % save startpoint
	lineto
	currentpoint 4 2 roll % save targetpoint
	penend 0 get penend 1 get rlineto
	% compute parameters for parallel line
	2 1 roll penend 0 get add
	2 1 roll penend 1 get add
	lineto
	penend 0 get neg penend 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def

/penrlineto { % usage like rlineto
	2 copy   % save arguments
	rlineto
	currentpoint 4 2 roll % save targetpoint
	penend 0 get penend 1 get rlineto
	% compute parameters for parallel line
	2 1 roll neg
	2 1 roll neg
	rlineto
	penend 0 get neg penend 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def

/pencurveto { % usage like curveto
	6 copy currentpoint 8 2 roll   % save position and arguments
	curveto
	currentpoint 10 2 roll % save targetpoint
	penend 0 get penend 1 get rlineto
	% compute parameters for parallel line
	4 2 roll pop pop 4 2 roll 6 2 roll
	3 {
		6 5 roll penend 0 get add
		6 5 roll penend 1 get add
	} repeat
	curveto
	penend 0 get neg penend 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def

/penrcurveto { % usage like rcurveto
	6 copy   % save arguments
	rcurveto
	currentpoint 8 2 roll % save targetpoint
	penend 0 get penend 1 get rlineto
	% compute parameters for parallel line
	neg exch neg exch 
	6 2 roll exch 5 index add exch 4 index add
	4 2 roll exch 5 index add exch 4 index add
	6 -2 roll
	rcurveto
	penend 0 get neg penend 1 get neg rlineto
	fill moveto % fill and move to targetpoint
} bind def

% alternative pen
/pen2end 2 array def
/pen2width 0.5 def
/pen2lineto { % usage like lineto
    % draw curve with stroke first
    2 copy currentpoint 4 2 roll lineto stroke moveto
	currentpoint 4 2 roll % save startpoint
	lineto
	currentpoint 4 2 roll % save targetpoint
	pen2end 0 get pen2end 1 get rlineto
	% compute parameters for parallel line
	2 1 roll pen2end 0 get add
	2 1 roll pen2end 1 get add
	lineto
	pen2end 0 get neg pen2end 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def
/pen2rlineto { % usage like rlineto
    % draw curve with stroke first
    2 copy currentpoint 4 2 roll rlineto stroke moveto
	2 copy   % save arguments
	rlineto
	currentpoint 4 2 roll % save targetpoint
	pen2end 0 get pen2end 1 get rlineto
	% compute parameters for parallel line
	2 1 roll neg
	2 1 roll neg
	rlineto
	pen2end 0 get neg pen2end 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def
/pen2curveto { % usage like curveto
    % draw curve with stroke first
    6 copy currentpoint 8 2 roll curveto stroke moveto
	6 copy currentpoint 8 2 roll   % save position and arguments
	curveto
	currentpoint 10 2 roll % save targetpoint
	pen2end 0 get pen2end 1 get rlineto
	% compute parameters for parallel line
	4 2 roll pop pop 4 2 roll 6 2 roll
	3 {
		6 5 roll pen2end 0 get add
		6 5 roll pen2end 1 get add
	} repeat
	curveto
	pen2end 0 get neg pen2end 1 get neg rlineto
	eofill moveto % fill and move to targetpoint
} bind def
/pen2rcurveto { % usage like rcurveto
    % draw curve with stroke first
    6 copy currentpoint 8 2 roll rcurveto stroke moveto
	6 copy   % save arguments
	rcurveto
	currentpoint 8 2 roll % save targetpoint
	pen2end 0 get pen2end 1 get rlineto
	% compute parameters for parallel line
	neg exch neg exch 
	6 2 roll exch 5 index add exch 4 index add
	4 2 roll exch 5 index add exch 4 index add
	6 -2 roll
	rcurveto
	pen2end 0 get neg pen2end 1 get neg rlineto
	fill moveto % fill and move to targetpoint
} bind def
%-----------------------------------------------

/tabfont 10 dict def
tabfont begin

/FontType 3 def

% chars are defined in 20x20 System
/FontBBox [0 0 20 20] def
/FontMatrix [0.05 0 0 0.05 0 0 ] def

% pen definitions for different font types
/frenchpen [ -2 -2 ] def

% connect ASCII code to drawing procedures
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding
% frenchtab: a-s
dup  97 /french_a put
dup  98 /french_b put
dup  99 /french_c put
dup 100 /french_d put
dup 101 /french_e put
dup 102 /french_f put
dup 103 /french_g put
dup 104 /french_h put
dup 105 /french_i put
dup 107 /french_k put
dup 108 /french_l put
dup 109 /french_m put
dup 110 /french_n put
dup 111 /french_o put
dup 112 /french_p put
dup 113 /french_q put
dup 114 /french_r put
dup 115 /french_s put
% italian tab a-o
%dup  97 /italian_0 put
%dup  98 /italian_1 put
%dup  99 /italian_2 put
%dup 100 /italian_3 put
%dup 101 /italian_4 put
%dup 102 /italian_5 put
%dup 103 /italian_6 put
%dup 104 /italian_7 put
%dup 105 /italian_8 put
%dup 107 /italian_9 put
%dup 108 /italian_10 put
%dup 109 /italian_11 put
%dup 110 /italian_12 put
%dup 111 /italian_13 put
% french bourdons: D-G
dup  68 /bourdon_4 put  % D
dup  69 /bourdon_5 put  % E
dup  70 /bourdon_6 put  % F
dup  71 /bourdon_7 put  % G
% italian bourdons: H-N
dup  72 /bourdon_8 put  % H
dup  73 /bourdon_9 put  % I
dup  74 /bourdon_10 put % J
dup  75 /bourdon_11 put % K
dup  76 /bourdon_12 put % L
dup  77 /bourdon_13 put % M
dup  78 /bourdon_14 put % N

116 /test_t put


% drawing procedures
/drawchar 4 dict def
drawchar begin
	/.notdef {} def
	/french_a { % letter a in tablature
        frenchpen penend copy pop
    12 10 moveto
    17 10 penlineto
    16 8 15 3 17 2 pencurveto
    17 2 18 2 19 3 pencurveto
    12 10 moveto
    8 6 8 2 12 2 pencurveto
    12 2 13 2 15 4 pencurveto
	} def
	/french_b { % letter b in tablature
        frenchpen penend copy pop
		9 16 moveto
		10 16 penlineto
		10 4 penlineto
		13 2 penlineto
		20 3 17 10 14 10 pencurveto
		10 7 penlineto
	} def
	/french_c { % letter c in tablature
        frenchpen penend copy pop
		12 10 moveto
		18 10 penlineto
		12 10 moveto
		8 6 10 2 14 2 pencurveto
		14 2 15 2 16 3 pencurveto
	} def
	/french_d { % letter d in tablature
        frenchpen penend copy pop
		2 11 moveto
		%3 10 4 10 5 10 pencurveto
		3 10 5 10 6 10 pencurveto
		%2 12 moveto
		%3 11 5 10 8 10 pencurveto
		14 10 penlineto
		19 10 18 2 14 2 pencurveto
		8 2 10 8 12 10 pencurveto
	} def
	/french_e { % letter e in tablature
        frenchpen penend copy pop
		12 10 moveto
		18 9 11 5 10 4 pencurveto
		12 10 moveto
		6 8 8 2 14 2 pencurveto
		17 3 17 3 18 4 pencurveto
	} def
	/french_f { % letter f in tablature
        frenchpen penend copy pop
		12 14 moveto
		14 16 13 16 17 15 pencurveto
		12 14 moveto
		12 4 penlineto
		10 1 10 1 8 3 pencurveto
		9.5 10 moveto
		15 10 penlineto
	} def
	/french_g { % letter g in tablature
        frenchpen penend copy pop
		18 10 moveto
		12 10 penlineto
		8 6 12 3 16 9 pencurveto
		0 6 moveto
		2 8 lineto
		4 4 8 0.75 10 0.75 curveto
		14 0.75 15 6 14 9 curveto
		16 11 lineto
		17 4 14 0 10 0 curveto
		8 0 2 2 0 6 curveto
		fill
	} def
	/french_h { % letter h in tablature
        frenchpen penend copy pop
		9 16 moveto
		10 16 penlineto
		10 4 penlineto
		10 7 moveto
		14 10 penlineto
		17 10 18 6 16 3 pencurveto
		17 2 penlineto
	} def
	/french_i { % letter i in tablature
        frenchpen penend copy pop
		10 9 moveto 
		12 10 penlineto
		13.5 8.5 penlineto
		13 8.5 moveto
		12 3 penlineto
		11.5 3.5 moveto
		13 2 penlineto
		13 2 14 2 15 3 pencurveto
		14 16 moveto
		15 16 14.5 14.5 14 14 pencurveto
	} def
	/french_k { % letter k in tablature
        frenchpen penend copy pop
		9 16 moveto
		10 16 penlineto
		10 2 penlineto
		10 7 moveto
		14 10 penlineto
		19 7 13 3 12 2 pencurveto
		16 2 penlineto
		16 2 17 2 18 3 pencurveto
	} def
	/french_l { % letter l in tablature
        frenchpen penend copy pop
		10 15 moveto
		10 4 penlineto
		10 2 11 2 13 2 pencurveto
		13 2 14 2 15 3 pencurveto
		10 15 moveto
		16 19 15 11 12 8 pencurveto
	} def
	/french_m { % letter m in tablature
        frenchpen penend copy pop
        7 10 moveto
        8 10 9 9 9 8 pencurveto        
		9 8 moveto
		9 3 penlineto
        9.5 3 9.5 2 10 2 pencurveto
        9 8 moveto
        12 10 penlineto
        13 9 penlineto
        13 3 penlineto
        13.5 2 13.5 2 14 2 pencurveto
        13 8 moveto
        16 10 penlineto
        17 9 penlineto
        17 3 penlineto
        17.5 2 17.5 2 18 2 pencurveto
        18 2 18.5 2 19 2.5 pencurveto
	} def
    /french_n { % letter n in tablature
        frenchpen penend copy pop
        8 10 moveto
        9 10 10 9 10 8 pencurveto        
		10 8 moveto
		10 3 penlineto
        10.5 3 10.5 2 11 2 pencurveto
        10 8 moveto
        13 10 penlineto
        16 9 penlineto
        16 3 penlineto
        16.5 2 16.5 2 17 2 pencurveto
        17 2 18 2 19 3 pencurveto
    } def
    /french_o { % letter o in tablature
        frenchpen penend copy pop
        10 8 moveto
        10 3 penlineto
        14 2 penlineto
        12 10 moveto
        16 10 20 8 14 2 pencurveto
    } def
  /french_p {
    frenchpen penend copy pop
		9 12 moveto
        10 12 penlineto
        10 3 penlineto
        10.5 2 10.5 2 11 2 pencurveto
		10 7 moveto
        14 6 penlineto
        12 14 moveto
        16 14 20 12 14 6 pencurveto
  } def
  /french_q {
    frenchpen penend copy pop
    12 14 moveto
    17 14 penlineto
	16 14 moveto
	16 2 penlineto
    12 14 moveto
    8 10 8 6 12 6 pencurveto
    12 6 13 6 15 8 pencurveto
  } def
	/french_r {
        frenchpen penend copy pop
        10 10 moveto
        11 10 12 9 12 8 pencurveto        
		12 8 moveto
		12 3 penlineto
        12.5 3 12.5 2 13 2 pencurveto
        12 8 moveto
        14 9.5 penlineto
		15 10 16 10 17 9 pencurveto
	} def
  /french_s {
    frenchpen penend copy pop
		10 10 moveto
		11 6.5 penlineto
		15 8.5 penlineto
		17 8 17 6 16 4 pencurveto
		8 2 moveto
		11 4 12 3 14 2 pencurveto
		12 12 moveto
		14 11.5 15 11.5 17 12 pencurveto
    } def

    % french bourdons
    /bourdon_4 {
        frenchpen penend copy pop
        15 20 moveto
        15 2 penlineto
        11 20 moveto
        9 10 7 9 5 8 pencurveto
        19 8 penlineto
    } def
    /bourdon_5 {
        frenchpen penend copy pop
        17 20 moveto
        10 20 penlineto
        8 14 penlineto
        20 18 16 4 6 2 pencurveto
    } def
    /bourdon_6 {
        frenchpen penend copy pop
        18 20 moveto
        16 20 penlineto
        8 20 7 6 11 2 pencurveto
        9 9 moveto
        14 13 penlineto
        17 11 17 6 13 4 pencurveto
    } def
    /bourdon_7 {
        frenchpen penend copy pop
        6 20 moveto
        17 20 penlineto
        8 2 penlineto
        9 10 moveto
        15 10 penlineto
    } def

	% italian bourdons
	/bourdon_8 {
		1.5 setlinewidth 1 setlinecap 1 setlinejoin
		12 19 moveto
		-2 15 28 5 12 1 curveto
		-4 5 26 15 12 19 curveto
		stroke
	} def
	/bourdon_9 {
		1.5 setlinewidth 1 setlinecap 1 setlinejoin
		14 19 moveto
		2 18 9 2 16 14 curveto
		14 19 moveto
		17 18 18 10 8 0 curveto
		stroke
	} def
	/bourdon_10 {
		1.5 setlinewidth 1 setlinecap 1 setlinejoin
		4 14 moveto
		5 20 7 18 9 15 curveto
		17 1 lineto
		7 1 moveto
		17 18 lineto
		stroke
	} def
    /bourdon_11 {
		1.5 setlinewidth 1 setlinecap 1 setlinejoin
        6 19 moveto
        6 9 6 9 15 9 curveto
        16 19 moveto
        16 4 12 5 8 1 curveto
        stroke
    } def
    /bourdon_12 {
        1.5 setlinewidth 1 setlinecap 1 setlinejoin
        5 18 moveto 5 1 lineto
        3 1 moveto 9 1 lineto
        10 10 moveto
        9 15 10 19 15 19 curveto
        20 19 20 9 12 1 curveto
        20 1 lineto
        stroke
    } def
    /bourdon_13 {
        1.5 setlinewidth 1 setlinecap 1 setlinejoin
        5 18 moveto 5 1 lineto
        3 1 moveto 9 1 lineto
        10 10 moveto
        8 15 10 19 14 19 curveto
        20 19 17 11 14 9 curveto
        21 9 21 1 13 1 curveto
        stroke
    } def
    /bourdon_14 {
        1.5 setlinewidth 1 setlinecap 1 setlinejoin
        5 18 moveto 5 1 lineto
        3 1 moveto 9 1 lineto
        12 19 moveto
        12 16 11 8 9 6 curveto 19 6 lineto
        17 19 moveto 17 1 lineto
        stroke
    } def

    % italian tablature
    /italian_0 {
        1.5 setlinewidth
        17 10 moveto 10 10 7 0 360 arc stroke
    } bind def
    /italian_1 {
        2 setlinewidth 0 setlinecap
        10 2 moveto 10 18 lineto stroke
        8 2 moveto 12 2 lineto 10 3.5 lineto 8 2 lineto fill
        8 18 moveto 12 18 moveto 10 16.5 lineto 8 18 lineto fill
    } bind def
    /italian_2 {
        frenchpen penend copy pop
        9 18 moveto 17 18 10 7 7 4 pencurveto
        14 4 penlineto
    } bind def
    /italian_3 {
        /Helvetica 20 selectfont
        5 3 moveto (3) show
    } bind def
    /italian_4 {
        /Helvetica 20 selectfont
        5 3 moveto (4) show
    } bind def
    /italian_5 {
        /Helvetica 20 selectfont
        5 3 moveto (5) show
    } bind def
    /italian_6 {
        /Helvetica 20 selectfont
        5 3 moveto (6) show
    } bind def
    /italian_7 {
        /Helvetica 20 selectfont
        5 3 moveto (7) show
    } bind def
    /italian_8 {
        /Helvetica 20 selectfont
        5 3 moveto (8) show
    } bind def
    /italian_9 {
        /Helvetica 20 selectfont
        5 3 moveto (9) show
    } bind def
    /italian_10 {
        /Helvetica 20 selectfont
        5 3 moveto (x) show
    } bind def
    /italian_11 {
        /Helvetica 20 selectfont
        5 3 moveto (x) show
    } bind def
    /italian_12 {
        /Helvetica 20 selectfont
        5 3 moveto (x) show
    } bind def
    /italian_13 {
        /Helvetica 20 selectfont
        5 3 moveto (x) show
    } bind def

	/test_t {   % test output
        frenchpen penend copy pop
		10 0 moveto
		0 20 rlineto currentpoint stroke
		moveto
		penend 0 get neg -1 rlineto currentpoint  
		penend 0 get penend 1 get rlineto
		0 penend 1 get neg 1 add rlineto
		fill moveto
		2 -1 8 -1 6 -3 penrcurveto
	} def
end

% enable new font
/BuildChar {
20 0
0 0 20 20
setcachedevice
/char exch def
0.1 setlinewidth
begin
	Encoding char get
	drawchar exch get
	exec
	end
}def

end

/TabFont tabfont definefont
pop
%----------------------------------------------------------------

/Gitterbox {
	0 2 20 { /i exch def
		0 20 rlineto 2 -20 rmoveto
	} for
	-22 0 rmoveto
	0 2 20 { /i exch def
		20 0 rlineto -20 2 rmoveto
	} for
	stroke
} def


/Testsystem {
	% Linien
	currentpoint 0 60 rmoveto 200 0 rlineto stroke moveto
	currentpoint 0 45 rmoveto 200 0 rlineto stroke moveto
	currentpoint 0 30 rmoveto 200 0 rlineto stroke moveto
	currentpoint 0 15 rmoveto 200 0 rlineto stroke moveto
	currentpoint 200 0 rlineto stroke moveto
	/TabFont findfont 15 scalefont setfont
	% French tab
	currentpoint 10 61 rmoveto (abclmno) show moveto
	currentpoint 10 46 rmoveto (b) show moveto
	currentpoint 10 31 rmoveto (s) show moveto
	% Italian tab
	%currentpoint 10 52.5 rmoveto (bbb) show moveto
	%currentpoint 10 37.5 rmoveto (a) show moveto
	%currentpoint 10 22.5 rmoveto (p) show moveto
	%currentpoint 10 1 rmoveto (a) show moveto
    %currentpoint 10 -21.5 rmoveto (N) show moveto
} def



% Testbuchstaben
4 4 scale
0.05 setlinewidth
20 35 moveto
Gitterbox
20 35 moveto
/TabFont findfont 20 scalefont setfont
(a) show

20 10 moveto
Gitterbox
20 10 moveto
/TabFont findfont 20 scalefont setfont
(s) show

%45 10 moveto /ZapfChancery-MediumItalic findfont 15 scalefont setfont
%(0123456789) show

% Testausgabe
0.5 setlinewidth
20 100 moveto
Testsystem

showpage
